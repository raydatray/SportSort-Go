// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, email, password, type, sport_center_id)
VALUES ($1, $2, $3, $4, $5) RETURNING id, name, email, password, type, sport_center_id
`

type CreateUserParams struct {
	Name          string
	Email         string
	Password      string
	Type          UserType
	SportCenterID pgtype.Int4
}

// Creates a new user
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Type,
		arg.SportCenterID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Type,
		&i.SportCenterID,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

// Deletes a user
func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, email, password, type, sport_center_id FROM users WHERE id = $1
`

// Retrieves a user by ID
func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Type,
		&i.SportCenterID,
	)
	return i, err
}

const listUserByType = `-- name: ListUserByType :many
SELECT id, name, email, password, type, sport_center_id FROM users
WHERE type = $1
`

// Lists all users with a given type
func (q *Queries) ListUserByType(ctx context.Context, type_ UserType) ([]User, error) {
	rows, err := q.db.Query(ctx, listUserByType, type_)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.Type,
			&i.SportCenterID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email, password, type, sport_center_id FROM users
`

// Lists all users
func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.Type,
			&i.SportCenterID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET name = $2, email = $3, password = $4, type = $5, sport_center_id = $6
WHERE id = $1 RETURNING id, name, email, password, type, sport_center_id
`

type UpdateUserParams struct {
	ID            int64
	Name          string
	Email         string
	Password      string
	Type          UserType
	SportCenterID pgtype.Int4
}

// Updates a user's information
func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Type,
		arg.SportCenterID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Type,
		&i.SportCenterID,
	)
	return i, err
}
