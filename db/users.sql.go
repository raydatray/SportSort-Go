// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const confirmDeleteUser = `-- name: ConfirmDeleteUser :exec
DELETE FROM users WHERE id = $1 AND deleted = true
`

// Deletes a user
func (q *Queries) ConfirmDeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, confirmDeleteUser, id)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (name, email, password, type, sport_center_id, deleted)
VALUES ($1, $2, $3, $4, $5, false)
`

type CreateUserParams struct {
	Name          string
	Email         string
	Password      string
	Type          UserType
	SportCenterID pgtype.Int4
}

// Creates a new user
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Type,
		arg.SportCenterID,
	)
	return err
}

const filterUsers = `-- name: FilterUsers :many
SELECT id, name, email, password, type, sport_center_id, deleted FROM users
WHERE
  ($1::user_type[] IS NULL OR type = ANY($1)) AND
  ($2::integer[] IS NULL OR sport_center_id = ANY($2)) AND
  ($3::boolean IS NULL OR deleted = $3)
`

type FilterUsersParams struct {
	Column1 []UserType
	Column2 []int32
	Column3 bool
}

// Filters users based on optional parameters (user type, sport center id, deleted)
func (q *Queries) FilterUsers(ctx context.Context, arg FilterUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, filterUsers, arg.Column1, arg.Column2, arg.Column3)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.Type,
			&i.SportCenterID,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, name, email, password, type, sport_center_id, deleted FROM users WHERE id = $1
`

// Retrieves a user by ID
func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Type,
		&i.SportCenterID,
		&i.Deleted,
	)
	return i, err
}

const listUserByType = `-- name: ListUserByType :many
SELECT id, name, email, password, type, sport_center_id, deleted FROM users WHERE type = $1
`

// Lists all users with a given type
func (q *Queries) ListUserByType(ctx context.Context, type_ UserType) ([]User, error) {
	rows, err := q.db.Query(ctx, listUserByType, type_)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.Type,
			&i.SportCenterID,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email, password, type, sport_center_id, deleted FROM users
`

// Lists all users
func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.Type,
			&i.SportCenterID,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteUser = `-- name: SoftDeleteUser :exec
UPDATE users SET deleted = true WHERE id = $1 AND deleted = false RETURNING id, name, email, password, type, sport_center_id, deleted
`

// Soft-deletes a user by setting its deleted tag to true
func (q *Queries) SoftDeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, softDeleteUser, id)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET
  name = COALESCE($2, name),
  email = COALESCE($3, email),
  password = COALESCE($4, password),
  type = COALESCE($5, type),
  sport_center_id = COALESCE($6, sport_center_id)
WHERE id = $1
RETURNING id, name, email, password, type, sport_center_id, deleted
`

type UpdateUserParams struct {
	ID            int64
	Name          string
	Email         string
	Password      string
	Type          UserType
	SportCenterID pgtype.Int4
}

// Updates a user's information
func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Type,
		arg.SportCenterID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Type,
		&i.SportCenterID,
		&i.Deleted,
	)
	return i, err
}
