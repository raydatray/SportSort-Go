// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: course_sessions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCourseSession = `-- name: CreateCourseSession :one
INSERT INTO course_sessions (date, course_offering_id, room_id, instructor_id, start_time, end_time)
VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, date, course_offering_id, room_id, instructor_id, start_time, end_time
`

type CreateCourseSessionParams struct {
	Date             pgtype.Date
	CourseOfferingID int64
	RoomID           int64
	InstructorID     int64
	StartTime        pgtype.Time
	EndTime          pgtype.Time
}

// Creates a new course session
func (q *Queries) CreateCourseSession(ctx context.Context, arg CreateCourseSessionParams) (CourseSession, error) {
	row := q.db.QueryRow(ctx, createCourseSession,
		arg.Date,
		arg.CourseOfferingID,
		arg.RoomID,
		arg.InstructorID,
		arg.StartTime,
		arg.EndTime,
	)
	var i CourseSession
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.CourseOfferingID,
		&i.RoomID,
		&i.InstructorID,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}

const deleteCourseSession = `-- name: DeleteCourseSession :exec
DELETE FROM course_sessions WHERE id = $1
`

// Deletes a course session
func (q *Queries) DeleteCourseSession(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCourseSession, id)
	return err
}

const getCourseSession = `-- name: GetCourseSession :one
SELECT id, date, course_offering_id, room_id, instructor_id, start_time, end_time FROM course_sessions WHERE id = $1
`

// Retrieves a course session by ID
func (q *Queries) GetCourseSession(ctx context.Context, id int64) (CourseSession, error) {
	row := q.db.QueryRow(ctx, getCourseSession, id)
	var i CourseSession
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.CourseOfferingID,
		&i.RoomID,
		&i.InstructorID,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}

const listCourseSessionsByCourseOffering = `-- name: ListCourseSessionsByCourseOffering :many
SELECT id, date, course_offering_id, room_id, instructor_id, start_time, end_time FROM course_sessions WHERE course_offering_id = $1
`

// Lists all course sessions for a course offering
func (q *Queries) ListCourseSessionsByCourseOffering(ctx context.Context, courseOfferingID int64) ([]CourseSession, error) {
	rows, err := q.db.Query(ctx, listCourseSessionsByCourseOffering, courseOfferingID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CourseSession
	for rows.Next() {
		var i CourseSession
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.CourseOfferingID,
			&i.RoomID,
			&i.InstructorID,
			&i.StartTime,
			&i.EndTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCourseSession = `-- name: UpdateCourseSession :one
UPDATE course_sessions SET date = $2, room_id = $3, instructor_id = $4, start_time = $5, end_time = $6
WHERE id = $1 RETURNING id, date, course_offering_id, room_id, instructor_id, start_time, end_time
`

type UpdateCourseSessionParams struct {
	ID           int64
	Date         pgtype.Date
	RoomID       int64
	InstructorID int64
	StartTime    pgtype.Time
	EndTime      pgtype.Time
}

// Updates a course session's information
func (q *Queries) UpdateCourseSession(ctx context.Context, arg UpdateCourseSessionParams) (CourseSession, error) {
	row := q.db.QueryRow(ctx, updateCourseSession,
		arg.ID,
		arg.Date,
		arg.RoomID,
		arg.InstructorID,
		arg.StartTime,
		arg.EndTime,
	)
	var i CourseSession
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.CourseOfferingID,
		&i.RoomID,
		&i.InstructorID,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}
