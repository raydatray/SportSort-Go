// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type UserType string

const (
	UserTypeAdmin      UserType = "admin"
	UserTypeOwner      UserType = "owner"
	UserTypeInstructor UserType = "instructor"
	UserTypeCustomer   UserType = "customer"
)

func (e *UserType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserType(s)
	case string:
		*e = UserType(s)
	default:
		return fmt.Errorf("unsupported scan type for UserType: %T", src)
	}
	return nil
}

type NullUserType struct {
	UserType UserType
	Valid    bool // Valid is true if UserType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserType) Scan(value interface{}) error {
	if value == nil {
		ns.UserType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserType), nil
}

type CourseOffering struct {
	ID            int64
	Name          string
	StartingDate  pgtype.Date
	EndingDate    pgtype.Date
	Price         pgtype.Numeric
	SportCenterID int32
	CourseTypeID  int64
	InstructorID  int64
}

type CourseSession struct {
	ID               int64
	Date             pgtype.Date
	CourseOfferingID int64
	RoomID           int64
	InstructorID     int64
	StartTime        pgtype.Time
	EndTime          pgtype.Time
}

type CourseType struct {
	ID   int64
	Name string
	Rate pgtype.Numeric
}

type Registration struct {
	UserID           int64
	CourseOfferingID int64
	RegistrationDate pgtype.Timestamptz
	PricePaid        pgtype.Numeric
}

type Review struct {
	ID           int64
	UserID       int64
	Rating       int32
	Comment      pgtype.Text
	ReviewDate   pgtype.Timestamptz
	InstructorID pgtype.Int8
	CourseTypeID pgtype.Int8
}

type Room struct {
	ID            int64
	Name          string
	Capacity      int64
	SportCenterID int32
}

type Session struct {
	ID           int64
	UserID       int64
	SessionToken string
	CreatedAt    pgtype.Timestamptz
	ExpiresAt    pgtype.Timestamptz
}

type SportCenter struct {
	ID   int32
	Name string
}

type User struct {
	ID            int64
	Name          string
	Email         string
	Password      string
	Type          UserType
	SportCenterID pgtype.Int4
}
