// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: course_types.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCourseType = `-- name: CreateCourseType :one
INSERT INTO course_types (name, rate) VALUES ($1, $2) RETURNING id, name, rate
`

type CreateCourseTypeParams struct {
	Name string
	Rate pgtype.Numeric
}

// Creates a new course type
func (q *Queries) CreateCourseType(ctx context.Context, arg CreateCourseTypeParams) (CourseType, error) {
	row := q.db.QueryRow(ctx, createCourseType, arg.Name, arg.Rate)
	var i CourseType
	err := row.Scan(&i.ID, &i.Name, &i.Rate)
	return i, err
}

const deleteCourseType = `-- name: DeleteCourseType :exec
DELETE FROM course_types WHERE id = $1
`

// Deletes a course type
func (q *Queries) DeleteCourseType(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCourseType, id)
	return err
}

const getCourseType = `-- name: GetCourseType :one
SELECT id, name, rate FROM course_types WHERE id = $1
`

// Retrieves a course type by ID
func (q *Queries) GetCourseType(ctx context.Context, id int64) (CourseType, error) {
	row := q.db.QueryRow(ctx, getCourseType, id)
	var i CourseType
	err := row.Scan(&i.ID, &i.Name, &i.Rate)
	return i, err
}

const listCourseTypes = `-- name: ListCourseTypes :many
SELECT id, name, rate FROM course_types
`

// Lists all course types
func (q *Queries) ListCourseTypes(ctx context.Context) ([]CourseType, error) {
	rows, err := q.db.Query(ctx, listCourseTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CourseType
	for rows.Next() {
		var i CourseType
		if err := rows.Scan(&i.ID, &i.Name, &i.Rate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCourseType = `-- name: UpdateCourseType :one
UPDATE course_types SET name = $2, rate = $3 WHERE id = $1 RETURNING id, name, rate
`

type UpdateCourseTypeParams struct {
	ID   int64
	Name string
	Rate pgtype.Numeric
}

// Updates a course type's information
func (q *Queries) UpdateCourseType(ctx context.Context, arg UpdateCourseTypeParams) (CourseType, error) {
	row := q.db.QueryRow(ctx, updateCourseType, arg.ID, arg.Name, arg.Rate)
	var i CourseType
	err := row.Scan(&i.ID, &i.Name, &i.Rate)
	return i, err
}
