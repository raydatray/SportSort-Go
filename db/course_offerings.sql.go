// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: course_offerings.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCourseOffering = `-- name: CreateCourseOffering :one
INSERT INTO course_offerings (name, starting_date, ending_date, price, sport_center_id, course_type_id, instructor_id)
VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, name, starting_date, ending_date, price, sport_center_id, course_type_id, instructor_id
`

type CreateCourseOfferingParams struct {
	Name          string
	StartingDate  pgtype.Date
	EndingDate    pgtype.Date
	Price         pgtype.Numeric
	SportCenterID int32
	CourseTypeID  int64
	InstructorID  int64
}

// Creates a new course offering
func (q *Queries) CreateCourseOffering(ctx context.Context, arg CreateCourseOfferingParams) (CourseOffering, error) {
	row := q.db.QueryRow(ctx, createCourseOffering,
		arg.Name,
		arg.StartingDate,
		arg.EndingDate,
		arg.Price,
		arg.SportCenterID,
		arg.CourseTypeID,
		arg.InstructorID,
	)
	var i CourseOffering
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StartingDate,
		&i.EndingDate,
		&i.Price,
		&i.SportCenterID,
		&i.CourseTypeID,
		&i.InstructorID,
	)
	return i, err
}

const deleteCourseOffering = `-- name: DeleteCourseOffering :exec
DELETE FROM course_offerings WHERE id = $1
`

// Deletes a course offering
func (q *Queries) DeleteCourseOffering(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCourseOffering, id)
	return err
}

const getCourseOffering = `-- name: GetCourseOffering :one
SELECT id, name, starting_date, ending_date, price, sport_center_id, course_type_id, instructor_id FROM course_offerings WHERE id = $1
`

// Retrieves a course offering by ID
func (q *Queries) GetCourseOffering(ctx context.Context, id int64) (CourseOffering, error) {
	row := q.db.QueryRow(ctx, getCourseOffering, id)
	var i CourseOffering
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StartingDate,
		&i.EndingDate,
		&i.Price,
		&i.SportCenterID,
		&i.CourseTypeID,
		&i.InstructorID,
	)
	return i, err
}

const listCourseOfferingsBySportCenter = `-- name: ListCourseOfferingsBySportCenter :many
SELECT id, name, starting_date, ending_date, price, sport_center_id, course_type_id, instructor_id FROM course_offerings WHERE sport_center_id = $1
`

// Lists all course offerings for a sport center
func (q *Queries) ListCourseOfferingsBySportCenter(ctx context.Context, sportCenterID int32) ([]CourseOffering, error) {
	rows, err := q.db.Query(ctx, listCourseOfferingsBySportCenter, sportCenterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CourseOffering
	for rows.Next() {
		var i CourseOffering
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.StartingDate,
			&i.EndingDate,
			&i.Price,
			&i.SportCenterID,
			&i.CourseTypeID,
			&i.InstructorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCourseOffering = `-- name: UpdateCourseOffering :one
UPDATE course_offerings
SET name = $2, starting_date = $3, ending_date = $4, price = $5, course_type_id = $6, instructor_id = $7
WHERE id = $1 RETURNING id, name, starting_date, ending_date, price, sport_center_id, course_type_id, instructor_id
`

type UpdateCourseOfferingParams struct {
	ID           int64
	Name         string
	StartingDate pgtype.Date
	EndingDate   pgtype.Date
	Price        pgtype.Numeric
	CourseTypeID int64
	InstructorID int64
}

// Updates a course offering's information
func (q *Queries) UpdateCourseOffering(ctx context.Context, arg UpdateCourseOfferingParams) (CourseOffering, error) {
	row := q.db.QueryRow(ctx, updateCourseOffering,
		arg.ID,
		arg.Name,
		arg.StartingDate,
		arg.EndingDate,
		arg.Price,
		arg.CourseTypeID,
		arg.InstructorID,
	)
	var i CourseOffering
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StartingDate,
		&i.EndingDate,
		&i.Price,
		&i.SportCenterID,
		&i.CourseTypeID,
		&i.InstructorID,
	)
	return i, err
}
