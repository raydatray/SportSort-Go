// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: reviews.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createReview = `-- name: CreateReview :one
INSERT INTO reviews (user_id, rating, comment, review_date, instructor_id, course_type_id)
VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, user_id, rating, comment, review_date, instructor_id, course_type_id
`

type CreateReviewParams struct {
	UserID       int64
	Rating       int32
	Comment      pgtype.Text
	ReviewDate   pgtype.Timestamptz
	InstructorID pgtype.Int8
	CourseTypeID pgtype.Int8
}

// Creates a new review
func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) (Review, error) {
	row := q.db.QueryRow(ctx, createReview,
		arg.UserID,
		arg.Rating,
		arg.Comment,
		arg.ReviewDate,
		arg.InstructorID,
		arg.CourseTypeID,
	)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Rating,
		&i.Comment,
		&i.ReviewDate,
		&i.InstructorID,
		&i.CourseTypeID,
	)
	return i, err
}

const deleteReview = `-- name: DeleteReview :exec
DELETE FROM reviews WHERE id = $1
`

// Deletes a review
func (q *Queries) DeleteReview(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteReview, id)
	return err
}

const getReview = `-- name: GetReview :one
SELECT id, user_id, rating, comment, review_date, instructor_id, course_type_id FROM reviews WHERE id = $1
`

// Retrieves a review by ID
func (q *Queries) GetReview(ctx context.Context, id int64) (Review, error) {
	row := q.db.QueryRow(ctx, getReview, id)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Rating,
		&i.Comment,
		&i.ReviewDate,
		&i.InstructorID,
		&i.CourseTypeID,
	)
	return i, err
}

const listCourseTypeReviews = `-- name: ListCourseTypeReviews :many
SELECT id, user_id, rating, comment, review_date, instructor_id, course_type_id FROM reviews WHERE course_type_id = $1
`

// Lists all reviews for a course type
func (q *Queries) ListCourseTypeReviews(ctx context.Context, courseTypeID pgtype.Int8) ([]Review, error) {
	rows, err := q.db.Query(ctx, listCourseTypeReviews, courseTypeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Rating,
			&i.Comment,
			&i.ReviewDate,
			&i.InstructorID,
			&i.CourseTypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listInstructorReviews = `-- name: ListInstructorReviews :many
SELECT id, user_id, rating, comment, review_date, instructor_id, course_type_id FROM reviews WHERE instructor_id = $1
`

// Lists all reviews for an instructor
func (q *Queries) ListInstructorReviews(ctx context.Context, instructorID pgtype.Int8) ([]Review, error) {
	rows, err := q.db.Query(ctx, listInstructorReviews, instructorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Rating,
			&i.Comment,
			&i.ReviewDate,
			&i.InstructorID,
			&i.CourseTypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserReviews = `-- name: ListUserReviews :many
SELECT id, user_id, rating, comment, review_date, instructor_id, course_type_id FROM reviews WHERE user_id = $1
`

// Lists all reviews by a user
func (q *Queries) ListUserReviews(ctx context.Context, userID int64) ([]Review, error) {
	rows, err := q.db.Query(ctx, listUserReviews, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Rating,
			&i.Comment,
			&i.ReviewDate,
			&i.InstructorID,
			&i.CourseTypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReview = `-- name: UpdateReview :one
UPDATE reviews SET rating = $2, comment = $3 WHERE id = $1 RETURNING id, user_id, rating, comment, review_date, instructor_id, course_type_id
`

type UpdateReviewParams struct {
	ID      int64
	Rating  int32
	Comment pgtype.Text
}

// Updates a review's information
func (q *Queries) UpdateReview(ctx context.Context, arg UpdateReviewParams) (Review, error) {
	row := q.db.QueryRow(ctx, updateReview, arg.ID, arg.Rating, arg.Comment)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Rating,
		&i.Comment,
		&i.ReviewDate,
		&i.InstructorID,
		&i.CourseTypeID,
	)
	return i, err
}
